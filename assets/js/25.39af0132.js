(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{290:function(n,t,a){"use strict";a.r(t);var i=a(13),e=Object(i.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"ray-tracing-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ray-tracing-1"}},[n._v("#")]),n._v(" Ray Tracing 1")]),n._v(" "),t("p",[n._v("Whitted-Style Ray Tracing")]),n._v(" "),t("p",[n._v("光栅化不能很好的处理全局效果\nSoft shadows\nGlossy reflection 好比古代的铜镜，虽然可以反射，但是有些模糊，因为铜镜的表面还是很粗糙的\nIndirect illumination 间接光照，就是光的弹射不只一次")]),n._v(" "),t("p",[n._v("光栅化是快，但是质量相对低")]),n._v(" "),t("p",[n._v("光线追踪是精确的，但是非常慢\n光栅化是实时，光线追踪是离线\n例如电影的一帧，就需要10k CPU渲染一个小时")]),n._v(" "),t("p",[n._v("光路是可逆的")]),n._v(" "),t("p",[n._v("Recursive(Whitted-Style) Ray Tracing是计算每个点的弹射，每个弹射点都算一次着色")]),n._v(" "),t("p",[n._v("求交点\n什么是交点，既在光线上，又在球上")]),n._v(" "),t("p",[n._v("在一个封闭的图形里面，随便点一个点，和光源连在一起，如果和图形的交点是奇数，则这个点一点在图形内，如果是偶数则在图形外，在3维中也是有效的")]),n._v(" "),t("p",[n._v("如果计算光源和每个场景中每个三角形的交点，再求出最近距离，那会非常慢，所以要加速。\n使用包围体（Bounding Volumes）来加速\n包围体的作用，就是如果光线和包围物体的这个盒子都碰不到，就更别说里面的物体了\nAxis-Aligned Bounding Box(AABB)(轴对齐包围盒)")])])}),[],!1,null,null,null);t.default=e.exports}}]);